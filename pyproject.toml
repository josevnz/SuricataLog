[build-system]
requires = [
    "setuptools >= 70.1.0",
    "wheel>=0.43.0",
    "build>=1.2.1",
    "textual==0.83.0",
    "textual-serve==1.1.1",
    "pytz==2024.1"
]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
lint = [
    "pylint",
]
dev = [
    "textual-dev>=1.6.1",
    "twine>=5.1.0",
]

[project]
name = "SuricataLog"
version = "1.0.4"
authors = [
    {name = "Jose Vicente Nunez", email = "kodegeek.com@protonmail.com"},
]
maintainers = [
    {name = "Jose Vicente Nunez", email = "kodegeek.com@protonmail.com"},
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python"
]
dependencies = [
    "textual==0.83.0",
    "textual-serve==1.1.1",
    "pytz==2024.1"
]
description = "Scripts to display contents of Suricata eve.json log"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.9"
license = {file = "LICENSE"}
keywords = ["suricata", "log", "eve"]
[project.urls]
Repository = "https://github.com/josevnz/SuricataLog"

[tool.setuptools.packages.find]
where = ["."]
exclude = ["test*"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
"suricatalog" = ["css/*.tcss"]

[project.scripts]
eve_json = "suricatalog.scripts.eve_json:main"
eve_log = "suricatalog.scripts.eve_log:main"
eve_server = "suricatalog.scripts.eve_server:main"
eve_payload = "suricatalog.scripts.eve_payload:main"



# Pylint is quite verbose, keep overrides here
# pylint --generate-toml-config
[tool.pylint.main]
fail-under = 10
ignore = ["CVS"]
ignore-patterns = ["^\\.#"]
jobs = 0
limit-inference-results = 100
persistent = true
py-version = "3.11"
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
max-args = 10
max-attributes = 7
max-bool-expr = 5
max-branches = 25
max-locals = 35
max-parents = 7
max-positional-arguments = 7
max-public-methods = 20
max-returns = 6
max-statements = 90
min-public-methods = 1

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$|import|from"
indent-after-paren = 4
indent-string = "    "
max-line-length = 200
max-module-lines = 1000

[tool.pylint.imports]
known-third-party = ["enchant"]

[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = ["raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "use-implicit-booleaness-not-comparison-to-string", "use-implicit-booleaness-not-comparison-to-zero", "pointless-string-statement", "consider-using-dict-items", "consider-using-enumerate"]


[tool.pylint.method_args]
# List of qualified names (i.e., library.method) which require a timeout
timeout-methods = ["requests.api.delete", "requests.api.get", "requests.api.head", "requests.api.options", "requests.api.patch", "requests.api.post", "requests.api.put", "requests.api.request"]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 7

never-returning-functions = ["sys.exit", "argparse.parse_error"]
suggest-join-with-non-empty-separator = true

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 10

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager", "attribute-defined-outside-init"]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local", "argparse.Namespace"]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]

